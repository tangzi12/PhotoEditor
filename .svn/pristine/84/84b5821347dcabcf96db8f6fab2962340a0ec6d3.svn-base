/*
 * Copyright (C) 2012 CyberAgent
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.tencent.zebra.effect.utils;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;

import com.micro.filter.BaseFilter;
import com.tencent.view.FilterEnum;

import java.util.LinkedList;
import java.util.List;

public class GPUImageFilterTools {

    public static   FilterList filters = new FilterList();
    static {
//        filters.addFilter("美白", FilterEnum.MIC_Portait,8);
//        filters.addFilter("绚丽", FilterEnum.MIC_GLOW);
//        filters.addFilter("清逸", FilterEnum.MIC_AMARO);
//        filters.addFilter("粉嫩", FilterEnum.MIC_Portait,7);
//        filters.addFilter("寒境", FilterEnum.MIC_XPRO2);
//        filters.addFilter("甜美", FilterEnum.MIC_Portait,103);

        filters.addFilter("甜美", FilterEnum.MIC_Portait,103);
        filters.addFilter("白嫩可人", FilterEnum.MIC_Portait,3);
        filters.addFilter("明亮", FilterEnum.WEICO_SUN);
        filters.addFilter("秋日", FilterEnum.MIC_EARLYBIRD);
        filters.addFilter("清逸", FilterEnum.MIC_AMARO);
        filters.addFilter("绚丽", FilterEnum.MIC_GLOW);

        filters.addFilter("清晰黑白", FilterEnum.WEICO_BW);

        //裸妆
        filters.addFilter("怀旧", FilterEnum.MIC_HEFEI);

    }
    public static void showDialog(final Context context,
            final OnGpuImageFilterChosenListener listener) {




//        filters.addFilter("清新", FilterEnum.MIC_Portait,1);
//        filters.addFilter("manga", FilterEnum.MIC_MANGA_FILTER);
//        
//        filters.addFilter("白嫩可人", FilterEnum.MIC_Portait,3);
//        filters.addFilter("烈焰红唇", FilterEnum.MIC_Portait,4);
//        filters.addFilter("天生丽质", FilterEnum.MIC_Portait,5);
//        filters.addFilter("美肤", FilterEnum.MIC_Portait,6);
//        
//        filters.addFilter("美白", FilterEnum.MIC_Portait,8);
//        filters.addFilter("绚丽", FilterEnum.MIC_GLOW);
//        filters.addFilter("清逸", FilterEnum.MIC_AMARO);
//        filters.addFilter("粉嫩", FilterEnum.MIC_Portait,7);
//        filters.addFilter("寒境", FilterEnum.MIC_XPRO2);
//        filters.addFilter("甜美", FilterEnum.MIC_Portait,103);
        
//        filters.addFilter("胶片", FilterEnum.MIC_LOMOFILM);
//        
//        filters.addFilter("现代", FilterEnum.MIC_HUDSON);
//        filters.addFilter("童话", FilterEnum.MIC_NASHVILLE);
//        filters.addFilter("秋日", FilterEnum.MIC_RISE);
//        filters.addFilter("咖啡", FilterEnum.MIC_HEFEI);
//        filters.addFilter("山色", FilterEnum.MIC_DIANA);
//        
//        
//        
//        
//        
//        filters.addFilter("淡雅", FilterEnum.WEICO_FILM);
//        
//        filters.addFilter("紫罗兰", FilterEnum.WEICO_VIOLET);
//        filters.addFilter("洛丽塔", FilterEnum.MIC_ABAO);
//       
//        filters.addFilter("明亮", FilterEnum.WEICO_SUN);
//        filters.addFilter("美味", FilterEnum.MIC_JINGWU1);
//        filters.addFilter("浓郁", FilterEnum.MIC_DIANA);
//        filters.addFilter("黑白", FilterEnum.WEICO_BW);
//        filters.addFilter("回忆", FilterEnum.MIC_LOFI);
//        
//       
//
//        filters.addFilter("basic1", FilterEnum.MIC_Flares);
//        filters.addFilter("彩铅", FilterEnum.MIC_COLORPENCIL);
//        filters.addFilter("素描", FilterEnum.MIC_NEWSKETCH);
//        filters.addFilter("蜡笔", FilterEnum.MIC_SketchMark);
//        filters.addFilter("版画", FilterEnum.MIC_PrintFilter);
//       
//       
//        filters.addFilter("自然美容", FilterEnum.MIC_NATURALBEAUTY);
//        filters.addFilter("时尚", FilterEnum.QQ_Tonnychurch);
//        filters.addFilter("暖暖", FilterEnum.MIC_WARM);
//        filters.addFilter("阳光物语", FilterEnum.MIC_SUNSHINE);
//        
//        filters.addFilter("幻想", FilterEnum.MIC_TonnyTwoPass);
//        filters.addFilter("古典", FilterEnum.MIC_TonnyNostalgic);
//        filters.addFilter("柳绿花红", FilterEnum.MIC_NEWABO);
//        filters.addFilter("加州旅馆", FilterEnum.MIC_VALENCIA);
//        
//        filters.addFilter("沁人", FilterEnum.MIC_DARKPRO);
//        filters.addFilter("深沉", FilterEnum.WEICO_INDIGO);
//        filters.addFilter("清晰文档", FilterEnum.MIC_JINGWU2);
//        filters.addFilter("温情", FilterEnum.WEICO_LOFT);
//        filters.addFilter("热情", FilterEnum.MIC_VALENCIA);
//        
//        filters.addFilter("映红", FilterEnum.QQ_ROWFILM);
//        filters.addFilter("银装", FilterEnum.WEICO_LOFT);
//        filters.addFilter("淡粉", FilterEnum.MIC_1977);
//        filters.addFilter("紫罗兰", FilterEnum.WEICO_SILVER);
//        filters.addFilter("非洲黄", FilterEnum.MIC_KELVIN);
//        filters.addFilter("LOMO", FilterEnum.MIC_DARKLOMO);
//        filters.addFilter("往事", FilterEnum.WEICO_MOMENT);
//        filters.addFilter("清晰黑白", FilterEnum.QQ_Tonnybw);
//        filters.addFilter("拍立得", FilterEnum.MIC_INSTANT);
//        filters.addFilter("戴安娜", FilterEnum.MIC_DIANA);
//        filters.addFilter("同桌的你", FilterEnum.MIC_WALDEN);
//        
//        filters.addFilter("宝利来", FilterEnum.MIC_BRANNAN);
//        filters.addFilter("干墨", FilterEnum.MIC_DRYINK);
//        filters.addFilter("曾经", FilterEnum.MIC_SketchMarkYear);
//        filters.addFilter("宝利来", FilterEnum.MIC_BRANNAN);
//        
//        
////cpu        
//        filters.addFilter("黑白漫画", FilterEnum.MIC_CartoonBlackWite);       
//        filters.addFilter("抽象漫画", FilterEnum.MIC_CartoonAbstract);
//        filters.addFilter("浪漫漫画", FilterEnum.MIC_CartoonRomantic);
//        filters.addFilter("抽象卡通", FilterEnum.MIC_CartoonAbstractEditor);
//        filters.addFilter("浪漫卡通", FilterEnum.MIC_CartoonRomanticEditor);
//        filters.addFilter("油画", FilterEnum.MIC_OilPaint);
//        filters.addFilter("法国油画", FilterEnum.MIC_FrenchOilPaint);
//        filters.addFilter("水彩", FilterEnum.MIC_OilWatercolor);
//        filters.addFilter("水粉", FilterEnum.MIC_OilGouachet);
//        filters.addFilter("水墨", FilterEnum.MIC_WaterInk);
//        filters.addFilter("彩墨", FilterEnum.MIC_ColorInk);
	

        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("Choose a filter");
        builder.setItems(filters.names.toArray(new String[filters.names.size()]),
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(final DialogInterface dialog, final int item) {
                        listener.onGpuImageFilterChosenListener(filters.filters.get(item),filters.effectIndex.get(item));
                    }
                });
        builder.create().show();
    }





    public interface OnGpuImageFilterChosenListener {
        void onGpuImageFilterChosenListener(int filterID, int effectindex);
    }

    public static class FilterList {
        public List<String> names = new LinkedList<String>();
        public List<Integer> filters = new LinkedList<Integer>();
        public List<Integer> effectIndex = new LinkedList<Integer>();
        public void addFilter(final String name, final Integer filter) {
            names.add(name);
            filters.add(filter);
            effectIndex.add(0);
        }
        public void addFilter(final String name, final Integer filter,final Integer filterIndex) {
            names.add(name);
            filters.add(filter);
            effectIndex.add(filterIndex);
        }
        public int  size(){
            if(names != null ){
               return  names.size();
            }
            return  0;
        }
    }

    public static class FilterAdjuster {
//        private final Adjuster<? extends GPUImageFilter> adjuster;

        public FilterAdjuster(final int filterID) {

        }

        public void adjust(final int percentage) {
//            if (adjuster != null) {
//                adjuster.adjust(percentage);
//            }
        }

        private abstract class Adjuster<T extends BaseFilter> {
            private T filter;

            @SuppressWarnings("unchecked")
            public Adjuster<T> filter(final BaseFilter filter) {
                this.filter = (T) filter;
                return this;
            }

            public T getFilter() {
                return filter;
            }

            public abstract void adjust(int percentage);

            protected float range(final int percentage, final float start, final float end) {
                return (end - start) * percentage / 100.0f + start;
            }

            protected int range(final int percentage, final int start, final int end) {
                return (end - start) * percentage / 100 + start;
            }
        }
    }
}
